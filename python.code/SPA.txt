import matplotlib.pyplot as plt
from pylab import *
import numpy as np
import seaborn as sns
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D

pd.set_option('display.max_columns', 1000)
pd.set_option('display.max_rows', 1000)
plt.rcParams['axes.unicode_minus'] = False
sns.set(font='SimHei')

#导入数据矩阵X，n*J
load = np.load(r'F:\ECS亚群分析\random_sample.npz')
X = load['X']
parameter = load['parameter']
n, J = X.shape[0], X.shape[1] - 3

#随机初始位置
LOC = np.zeros((n, 3))
LOC = np.matrix(LOC)
for i in range(0, n):
    LOC[i, 0] = np.random.normal(0.5, 0.1, 1)
    LOC[i, 1] = np.random.normal(0.5, 0.1, 1)
    LOC[i, 2] = X[i, 0]

#随机初始参数
PAR = np.zeros((J, 3))
PAR = np.matrix(PAR)

def fi(a, x, b):        #人群频率函数
    inx = np.dot(a.T, x) + b
    if inx >= 0:
        return (np.exp(-inx) + 1) ** -1
    else:
        return np.exp(inx) / (1 + np.exp(inx))

def f_loss(a1, a2, x1, x2, b):
    inx = a1 * x1 + a2 * x2 + b
    return (np.exp(-inx) + 1) ** -1



def dx(x):       #似然函数对x求偏导
    L = 0
    for j in range(0, J):
        b, g = PAR[j, 2], X[i, j+3]
        a = np.array((PAR[j, 0], PAR[j, 1])).reshape(2,1)
        L += -(g * (1 - fi(a, x, b)) - (2 - g) * fi(a, x, b)) * a + 0.01 * (np.linalg.norm(a)) ** -1 * a
    return L

def lossx(i, x1, x2):
    L = 0
    for j in range(0, J):
        a1, a2 = parameter[j, 0], parameter[j, 1]
        b, g = parameter[j, 2], X[i, j+3]
        L += -g * np.log(f_loss(a1, a2, x1, x2, b)) - (2 - g) * np.log(1 - f_loss(a1, a2, x1, x2, b))
    return L

def lossa(j, a1, a2):
    L = 0
    for i in range(0, n):
        x1, x2, b, g = X[i, 1], X[i, 2], parameter[j, 2], X[i, j+3]
        L += -g * np.log(f_loss(a1, a2, x1, x2, b)) - (2 - g) * np.log(1 - f_loss(a1, a2, x1, x2, b))
    return L

def da(a):       #似然函数对a求偏导
    L = 0
    for i in range(0, n):
        x = np.array((LOC[i, 0], LOC[i, 1])).reshape(2, 1)
        b, g = PAR[j, 2], X[i, j+3]
        L += -(g * (1 - fi(a, x, b)) - (2 - g) * fi(a, x, b)) * x + 0.01 * (np.linalg.norm(x)) ** -1 * x
    return L

def db(b):       #似然函数对b求偏导
    L = 0
    for i in range(0, n):
        g = X[i, j + 3]
        x = np.array((LOC[i, 0], LOC[i, 1])).reshape(2, 1)
        a = np.array((PAR[j, 0], PAR[j, 1])).reshape(2,1)
        L += -(g * (1 - fi(a, x, b)) - (2 - g) * fi(a, x, b))
    return L

def Hx(x):       #似然函数对x求二阶导
    L = 0
    for j in range(0, J):
        b = PAR[j, 2]
        a = np.array((PAR[j, 0], PAR[j, 1])).reshape(2, 1)
        L += 2 * fi(a, x, b) * (1 - fi(a, x, b)) * np.dot(a, a.T)
    return L

def Ha(a):       #似然函数对a求二阶导
    L = 0
    b = PAR[j, 2]
    for i in range(0, n):
        x = np.array((LOC[i, 0], LOC[i, 1])).reshape(2, 1)
        L += 2 * fi(a, x, b) * (1 - fi(a, x, b)) * np.dot(x, x.T)
    return L

def Hb(b):
    L = 0
    a = np.array((PAR[j, 0], PAR[j, 1])).reshape(2, 1)
    for i in range(0, n):
        x = np.array((LOC[i, 0], LOC[i, 1])).reshape(2, 1)
        L += 2 * fi(a, x, b) * (1 - fi(a, x, b))
    return L

def location_step():
    global LOC, i
    for i in range(n):
        x = np.array((LOC[i, 0], LOC[i, 1])).reshape(2, 1)
        for t in range(5):
            x -= 0.0006 * dx(x)
            if np.linalg.norm(dx(x)) < 0.001:
                break
        LOC[i, 0], LOC[i, 1] = x[0, 0], x[1, 0]
        print('第%d个样本坐标x'%i, LOC[i, 0], LOC[i, 1])

def parameter_step():
    global PAR, j
    for j in range(J):
        a = np.array((PAR[j, 0], PAR[j, 1])).reshape(2, 1)
        for t in range(50):
            a -= 0.01 * da(a)
            if np.linalg.norm(a, ord=1) < 0.01:
                break
        PAR[j, 0], PAR[j, 1] = a[0, 0], a[1, 0]
        print('第%d个SNP位点参数a,b' % j, PAR[j, 0], PAR[j, 1])
    for j in range(J):
        b = PAR[j, 2]
        for t in range(50):
            b -= 0.003 * db(b)
            if abs(db(b)) < 0.001:
                break
        PAR[j, 2] = b[0, 0]
        print('第%d个SNP位点参数b' % j, PAR[j, 2])

def single_point_a():
    global j
    print('真实参数', parameter[j,0], parameter[j,1], parameter[j,2])
    a = np.array((0., 0.)).reshape(2, 1)
    a2_array = []
    a1_array = []
    da1_array = []
    da2_array = []
    df = pd.DataFrame()
    a1_array.append(a[0, 0])
    a2_array.append(a[1, 0])
    da1_array.append(da(a)[0, 0])
    da2_array.append(da(a)[1, 0])
    alpha = 0.01
    for t in range(50):
        a -= alpha * da(a)
        a1_array.append(a[0, 0])
        a2_array.append(a[1, 0])
        da1_array.append(da(a)[0, 0])
        da2_array.append(da(a)[1, 0])
        if np.linalg.norm(da(a), ord=1) < 0.01:
            break
    df['a1'] = a1_array
    df['a2'] = a2_array
    df['da1'] = da1_array
    df['da2'] = da2_array
    print(df)
    fig = plt.figure()
    ax1 = Axes3D(fig)
    u = np.arange(-10, 10, 1)
    o = np.arange(-10, 10, 1)
    U, O = meshgrid(u, o)
    Z = lossa(j, U, O)
    ax1.plot_surface(U, O, Z, cmap='rainbow')
    ax1.set_xlabel('a1')
    ax1.set_ylabel('a2')
    A = df['a1']
    B = df['a2']
    C = lossa(j, A, B)
    ax1.plot(A, B, C, 'ro--', linewidth=1, markersize=4)
    plt.show()

def single_point_x():
    global i
    print('真实参数', X[i, 1], X[i,2])
    x = np.array((0., 0.)).reshape(2, 1)
    x2_array = []
    x1_array = []
    dx1_array = []
    dx2_array = []
    df = pd.DataFrame()
    x1_array.append(x[0, 0])
    x2_array.append(x[1, 0])
    dx1_array.append(dx(x)[0, 0])
    dx2_array.append(dx(x)[1, 0])
    alpha = 0.0006
    for t in range(50):
        x -= alpha * dx(x)
        x1_array.append(x[0, 0])
        x2_array.append(x[1, 0])
        dx1_array.append(dx(x)[0, 0])
        dx2_array.append(dx(x)[1, 0])
        if np.linalg.norm(dx(x), ord=1) < 0.01:
            break
    df['x1'] = x1_array
    df['x2'] = x2_array
    df['dx1'] = dx1_array
    df['dx2'] = dx2_array
    print(df)
    fig = plt.figure()
    ax1 = Axes3D(fig)
    u = np.arange(-0.2, 1, 0.1)
    o = np.arange(-0.2, 1, 0.1)
    U, O = meshgrid(u, o)
    Z = lossx(i, U, O)
    ax1.plot_surface(U, O, Z, cmap='rainbow')
    ax1.set_xlabel('x1')
    ax1.set_ylabel('x2')
    A = df['x1']
    B = df['x2']
    C = lossx(i, A, B)
    ax1.plot(A, B, C, 'ro--', linewidth=1, markersize=4)
    plt.show()

def run():
    for t in range(30):
        # 确定a, x, b
        parameter_step()
        print('确定第%d次迭代参数a, b' % (t+1))
        location_step()
        print('确定第%d次迭代参数x' % (t+1))

        # 绘制散点图并保存图片
        df = pd.DataFrame(LOC)
        df.rename(columns={0: 'x', 1: 'y', 2: '分群'}, inplace=True)
        palette = ['tab:red', 'tab:green', 'tab:blue']
        fig = sns.scatterplot(x='x', y='y', hue='分群', s=12, data=df, palette=palette)
        scatter_fig = fig.get_figure()
        figpath = 'F:\ECS亚群分析\Fig_location' + str(t + 1) + '次迭代'
        scatter_fig.savefig(figpath, dpi=400)
        df = pd.DataFrame()

        # 保存迭代后的a, x, b
        filepath = 'F:\ECS亚群分析\Data_' + str(t + 1) + '次迭代'
        np.savez(filepath, LOC=LOC, PAR=PAR)
        print('完成第%d次迭代' % (t+1))
        plt.cla()  # 清除之前的绘图

run()