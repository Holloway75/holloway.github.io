import numpy as np
from scipy import stats
import copy
import pandas as pd


def generate_data(a1, a2, n):
    global X
    X = []
    for i in range(int(n/2)):
        X.append(np.random.binomial(2, a1, 1))
    for i in range(int(n/2), n):
        X.append(np.random.binomial(2, a2, 1))

def my_EM(n, k, eps):
    global group, miu
    group = np.matrix(np.zeros((int(n/k), 2)))
    ave = np.mean(X)/2
    miu = np.array((ave * 0.7, ave * 1.3))
    for t in range(1000):
        oldmiu = copy.deepcopy(miu)
        for i in range(int(n/k)):
            l1 = stats.binom.pmf(sum(X[i*k:(i+1)*k]), n=(2 * k), p=miu[0])
            l2 = stats.binom.pmf(sum(X[i*k:(i+1)*k]), n=(2 * k), p=miu[1])
            group[i, 0] = l1/(l1 + l2)
            group[i, 1] = l2/(l1 + l2)
        for j in range(2):
            numerator, dominator = 0, 0
            for i in range(int(n/k)):
                numerator += group[i, j] * sum(X[i*k:i*k+k])
                dominator += group[i, j] * 2 * k
            miu[j] = numerator/dominator
        if np.linalg.norm(miu - oldmiu, 1) < eps:
            break

def loss2(n, k):
    l = 0
    for i in range(int(n/k)):
        l += np.log(stats.binom.pmf(sum(X[i*k:(i+1)*k]), n=(2 * k), p=miu[0]) * group[i, 0] + stats.binom.pmf(sum(X[i*k:(i+1)*k]), n=(2 * k), p=miu[1]) * group[i, 1])
    l -= 0.5 * np.linalg.norm(miu)
    return l

def loss1(n, k):
    l = 0
    miu = np.mean(X)/2
    for i in range(int(n/k)):
        l += np.log(stats.binom.pmf(sum(X[i*k:(i+1)*k]), n=(2 * k), p=miu))
    l -= 0.5 * np.linalg.norm(miu)
    return l



def run(a1, a2, n, eps):
    df = pd.DataFrame()
    sample = []
    mean1 = []
    Likelihood1 = []
    K = []
    mean2 = []
    Likelihood2 = []
    ratio = []
    for t in range(30):
        generate_data(a1, a2, n)
        print('随机生成第%d个样本'%(t+1))
        for k in [1, 5, 10, 20, 50, 100, 150, 200, 300, 400]:
            sample.append(t+1)
            mean1.append(np.mean(X)/2)
            Likelihood1.append(loss1(n, k))
            K.append(k)
            my_EM(n, k, eps)
            mean2.append(miu)
            Likelihood2.append(loss2(n, k))
            ratio.append(np.exp(loss2(n, k)-loss1(n, k)))
            print('完成计算第%d个样本'%(t+1), 'k=', k)
    df['sample'] = sample
    df['mean1'] = mean1
    df['Likelihood1'] = Likelihood1
    df['k'] = K
    df['mean2'] = mean2
    df['Likelihood2'] = Likelihood2
    df['ratio'] = ratio
    df.to_csv(r'F:\ECS亚群分析\7200(5%)2.txt', sep='\t', index=False, header=True)
    print(df)

run(0.05, 0.05, 7200, 0.0001)